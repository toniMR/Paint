/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Evaluacion;

import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import sm.amr.IU.EnumObjeto;
import sm.amr.IU.Lienzo;
import sm.amr.Imagen.CompToComp;
import sm.amr.Imagen.MiLookOp;
import sm.amr.Imagen.PixelToPixel;
import sm.amr.graficos.MiForma;
import sm.amr.Imagen.SepiaOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;
/**
 *
 * @author antonio
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    
    // Gestion de eventos de sonido
    class ManejadorAudio implements LineListener {
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                startAudioBoton.setEnabled (false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                startAudioBoton.setEnabled (true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }
    
   
    
    private VentanaInterna viSeleccionada;
    private BufferedImage imgOriginal;
    
    private Color colores[] = { Color.BLACK,Color.RED, Color.BLUE, Color.WHITE,
            Color.YELLOW, Color.GREEN};
    
    private SMPlayer player;
    private SMRecorder recorder;
    
    private File sonidoTemporal;
    
    // Formatos compatibles a cada tipo (reproduccion, imagen)
    private ArrayList<String> formatosReproduccion = new ArrayList<String>(Arrays.asList("mp4", "mpg", "avi", "mp3", "wav", "au"));
    private ArrayList<String> formatosImagen = new ArrayList<String>(Arrays.asList("jpeg", "jpg", "png", "bmp", "wbmp", "gif"));
    
    public Ventana() {
        initComponents();
        
        // El programa comienza mostrando una ventanaInternaImagen en la que se puede dibujar
        VentanaInternaImagen vi = new VentanaInternaImagen(this);
        this.escritorio.add(vi);
        vi.setVisible(true);
        
        BufferedImage img;
        img = new BufferedImage(this.escritorio.getWidth(),this.escritorio.getHeight(),BufferedImage.TYPE_INT_RGB);
        
        //Poner color blanco
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, img.getWidth(), img.getHeight()));
        vi.getLienzo().setImage(img);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Herramientas = new javax.swing.ButtonGroup();
        Colores = new javax.swing.ButtonGroup();
        tipoDegradado = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        herramientasBar = new javax.swing.JToolBar();
        nuevoBoton = new javax.swing.JButton();
        abrirBoton = new javax.swing.JButton();
        guardarBoton = new javax.swing.JButton();
        PuntoBoton = new javax.swing.JToggleButton();
        LineaBoton = new javax.swing.JToggleButton();
        CirculoBoton = new javax.swing.JToggleButton();
        RectanguloBoton = new javax.swing.JToggleButton();
        curvaBoton = new javax.swing.JToggleButton();
        TrazoLibreBoton = new javax.swing.JToggleButton();
        PersonalizadaBoton = new javax.swing.JToggleButton();
        jPanel13 = new javax.swing.JPanel();
        PaletaColoresTrazo = new javax.swing.JComboBox(colores);
        PaletaColoresRelleno = new javax.swing.JComboBox(colores);
        RellenoBoton = new javax.swing.JToggleButton();
        alisadoBoton = new javax.swing.JToggleButton();
        transparenciaSlider = new javax.swing.JSlider();
        seleccionarFiguraBoton = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        grosorComboBox = new javax.swing.JComboBox<>();
        trazoPunteadoBoton = new javax.swing.JToggleButton();
        jPanel14 = new javax.swing.JPanel();
        horizontalCheckbox = new javax.swing.JCheckBox();
        verticalCheckBox = new javax.swing.JCheckBox();
        degradadoCheckBox = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        PaletaColoresFrente = new javax.swing.JComboBox(colores);
        PaletaColoresFondo = new javax.swing.JComboBox(colores);
        jPanel17 = new javax.swing.JPanel();
        frenteBoton = new javax.swing.JButton();
        fondoBoton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jPanel12 = new javax.swing.JPanel();
        brilloSlider = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        FiltroComboBox = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        NormalContrasteBoton = new javax.swing.JButton();
        IluminadoContrasteBoton = new javax.swing.JButton();
        OscurecidoContrasteBoton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        SenoBoton = new javax.swing.JButton();
        sepiaBoton = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        CtCBoton = new javax.swing.JButton();
        PtPBoton = new javax.swing.JButton();
        LOBoton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        rotacionSlider = new javax.swing.JSlider();
        jPanel10 = new javax.swing.JPanel();
        AumentarEscaladoBoton = new javax.swing.JButton();
        DisminuirEscaladoBoton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        bandasBoton = new javax.swing.JButton();
        espacioColorComboBox = new javax.swing.JComboBox<>();
        jToolBar1 = new javax.swing.JToolBar();
        startAudioBoton = new javax.swing.JButton();
        listaReproduccionComboBox = new javax.swing.JComboBox<>();
        StartGrabarAudioBoton = new javax.swing.JButton();
        StopGrabarAudioBoton = new javax.swing.JButton();
        WebCamBoton = new javax.swing.JButton();
        DuplicarImagenBoton = new javax.swing.JButton();
        BarraEstado = new javax.swing.JLabel();
        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ArchivoNuevo = new javax.swing.JMenuItem();
        ArchivoAbrir = new javax.swing.JMenuItem();
        ArchivoGuardar = new javax.swing.JMenuItem();
        Edicion = new javax.swing.JMenu();
        EdicionBarraEstado = new javax.swing.JCheckBoxMenuItem();
        ImagenMenu = new javax.swing.JMenu();
        RescaleOpImagenMenu = new javax.swing.JMenuItem();
        LookupOpImagenMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1150, 197));
        setPreferredSize(new java.awt.Dimension(1700, 1000));

        jPanel4.setLayout(new java.awt.BorderLayout());

        herramientasBar.setRollover(true);

        nuevoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevoBoton.setFocusable(false);
        nuevoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(nuevoBoton);

        abrirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirBoton.setFocusable(false);
        abrirBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(abrirBoton);

        guardarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardarBoton.setFocusable(false);
        guardarBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardarBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(guardarBoton);

        Herramientas.add(PuntoBoton);
        PuntoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        PuntoBoton.setFocusable(false);
        PuntoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PuntoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PuntoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PuntoBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(PuntoBoton);

        Herramientas.add(LineaBoton);
        LineaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        LineaBoton.setFocusable(false);
        LineaBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LineaBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LineaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineaBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(LineaBoton);

        Herramientas.add(CirculoBoton);
        CirculoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        CirculoBoton.setFocusable(false);
        CirculoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CirculoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CirculoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CirculoBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(CirculoBoton);

        Herramientas.add(RectanguloBoton);
        RectanguloBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        RectanguloBoton.setFocusable(false);
        RectanguloBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RectanguloBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RectanguloBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectanguloBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(RectanguloBoton);

        Herramientas.add(curvaBoton);
        curvaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curva.jpg"))); // NOI18N
        curvaBoton.setFocusable(false);
        curvaBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        curvaBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        curvaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvaBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(curvaBoton);

        Herramientas.add(TrazoLibreBoton);
        TrazoLibreBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trazolibre.png"))); // NOI18N
        TrazoLibreBoton.setFocusable(false);
        TrazoLibreBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TrazoLibreBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TrazoLibreBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrazoLibreBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(TrazoLibreBoton);

        Herramientas.add(PersonalizadaBoton);
        PersonalizadaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/personalizada.png"))); // NOI18N
        PersonalizadaBoton.setFocusable(false);
        PersonalizadaBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PersonalizadaBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PersonalizadaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PersonalizadaBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(PersonalizadaBoton);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Trazo - Relleno"));

        PaletaColoresTrazo.setRenderer(new ColorCellRenderer());
        PaletaColoresTrazo.setMaximumRowCount(4);
        this.PaletaColoresTrazo.setBackground(Color.BLACK);
        PaletaColoresTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaletaColoresTrazoActionPerformed(evt);
            }
        });
        jPanel13.add(PaletaColoresTrazo);

        PaletaColoresRelleno.setRenderer(new ColorCellRenderer());
        PaletaColoresRelleno.setMaximumRowCount(4);
        this.PaletaColoresRelleno.setBackground(Color.BLACK);
        PaletaColoresRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaletaColoresRellenoActionPerformed(evt);
            }
        });
        jPanel13.add(PaletaColoresRelleno);

        herramientasBar.add(jPanel13);

        RellenoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        RellenoBoton.setFocusable(false);
        RellenoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RellenoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RellenoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RellenoBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(RellenoBoton);

        alisadoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisadoBoton.setFocusable(false);
        alisadoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisadoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisadoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisadoBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(alisadoBoton);

        transparenciaSlider.setValue(100);
        transparenciaSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Grado de Transparencia"));
        transparenciaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparenciaSliderStateChanged(evt);
            }
        });
        herramientasBar.add(transparenciaSlider);

        seleccionarFiguraBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        seleccionarFiguraBoton.setFocusable(false);
        seleccionarFiguraBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seleccionarFiguraBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        seleccionarFiguraBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarFiguraBotonActionPerformed(evt);
            }
        });
        herramientasBar.add(seleccionarFiguraBoton);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Trazo"));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Grosor"));

        grosorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        grosorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grosorComboBoxActionPerformed(evt);
            }
        });
        jPanel6.add(grosorComboBox);

        jPanel1.add(jPanel6);

        trazoPunteadoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punteada.jpg"))); // NOI18N
        trazoPunteadoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trazoPunteadoBotonActionPerformed(evt);
            }
        });
        jPanel1.add(trazoPunteadoBoton);

        herramientasBar.add(jPanel1);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Degradado"));

        tipoDegradado.add(horizontalCheckbox);
        horizontalCheckbox.setSelected(true);
        horizontalCheckbox.setText("Horizontal");
        horizontalCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalCheckboxActionPerformed(evt);
            }
        });

        tipoDegradado.add(verticalCheckBox);
        verticalCheckBox.setText("Vertical");
        verticalCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalCheckBoxActionPerformed(evt);
            }
        });

        degradadoCheckBox.setText("Degradado");
        degradadoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degradadoCheckBoxActionPerformed(evt);
            }
        });

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Frente - Fondo"));

        PaletaColoresFrente.setRenderer(new ColorCellRenderer());
        PaletaColoresFrente.setMaximumRowCount(4);
        this.PaletaColoresFrente.setBackground(Color.RED);
        PaletaColoresFrente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaletaColoresFrenteActionPerformed(evt);
            }
        });
        jPanel15.add(PaletaColoresFrente);

        PaletaColoresFondo.setRenderer(new ColorCellRenderer());
        PaletaColoresFondo.setMaximumRowCount(4);
        this.PaletaColoresFondo.setBackground(Color.BLUE);
        PaletaColoresFondo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaletaColoresFondoActionPerformed(evt);
            }
        });
        jPanel15.add(PaletaColoresFondo);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addComponent(degradadoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(verticalCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horizontalCheckbox))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(degradadoCheckBox)
                .addGap(30, 30, 30))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(horizontalCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(verticalCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        herramientasBar.add(jPanel14);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Al Frente - Al Fondo"));
        jPanel17.setPreferredSize(new java.awt.Dimension(180, 100));

        frenteBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/frente.png"))); // NOI18N
        frenteBoton.setFocusable(false);
        frenteBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        frenteBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        frenteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frenteBotonActionPerformed(evt);
            }
        });
        jPanel17.add(frenteBoton);

        fondoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fondo.jpeg"))); // NOI18N
        fondoBoton.setFocusable(false);
        fondoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fondoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fondoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fondoBotonActionPerformed(evt);
            }
        });
        jPanel17.add(fondoBoton);

        herramientasBar.add(jPanel17);

        jPanel4.add(herramientasBar, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar2.setRollover(true);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));

        brilloSlider.setMaximum(255);
        brilloSlider.setMinimum(-255);
        brilloSlider.setValue(0);
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });
        jPanel12.add(brilloSlider);

        jToolBar2.add(jPanel12);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));

        FiltroComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Media", "Binomial", "Enfoque", "Relieve", "Fronteras" }));
        FiltroComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltroComboBoxActionPerformed(evt);
            }
        });
        jPanel5.add(FiltroComboBox);

        jToolBar2.add(jPanel5);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));

        NormalContrasteBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        NormalContrasteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NormalContrasteBotonActionPerformed(evt);
            }
        });
        jPanel7.add(NormalContrasteBoton);

        IluminadoContrasteBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        IluminadoContrasteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IluminadoContrasteBotonActionPerformed(evt);
            }
        });
        jPanel7.add(IluminadoContrasteBoton);

        OscurecidoContrasteBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        OscurecidoContrasteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OscurecidoContrasteBotonActionPerformed(evt);
            }
        });
        jPanel7.add(OscurecidoContrasteBoton);

        jToolBar2.add(jPanel7);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Seno y Sepia"));

        SenoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        SenoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SenoBotonActionPerformed(evt);
            }
        });
        jPanel8.add(SenoBoton);

        sepiaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        sepiaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaBotonActionPerformed(evt);
            }
        });
        jPanel8.add(sepiaBoton);

        jToolBar2.add(jPanel8);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Propias"));

        CtCBoton.setText("CTC");
        CtCBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CtCBotonActionPerformed(evt);
            }
        });
        jPanel16.add(CtCBoton);

        PtPBoton.setText("PTP");
        PtPBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PtPBotonActionPerformed(evt);
            }
        });
        jPanel16.add(PtPBoton);

        LOBoton.setText("LO");
        LOBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOBotonActionPerformed(evt);
            }
        });
        jPanel16.add(LOBoton);

        jToolBar2.add(jPanel16);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));

        rotacionSlider.setMaximum(360);
        rotacionSlider.setValue(0);
        rotacionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionSliderStateChanged(evt);
            }
        });
        rotacionSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusLost(evt);
            }
        });
        jPanel9.add(rotacionSlider);

        jToolBar2.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));

        AumentarEscaladoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        AumentarEscaladoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AumentarEscaladoBotonActionPerformed(evt);
            }
        });
        jPanel10.add(AumentarEscaladoBoton);

        DisminuirEscaladoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        DisminuirEscaladoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisminuirEscaladoBotonActionPerformed(evt);
            }
        });
        jPanel10.add(DisminuirEscaladoBoton);

        jToolBar2.add(jPanel10);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));

        bandasBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        bandasBoton.setFocusable(false);
        bandasBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bandasBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bandasBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandasBotonActionPerformed(evt);
            }
        });
        jPanel11.add(bandasBoton);

        espacioColorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        espacioColorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espacioColorComboBoxActionPerformed(evt);
            }
        });
        jPanel11.add(espacioColorComboBox);

        jToolBar2.add(jPanel11);

        jToolBar1.setRollover(true);

        startAudioBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        startAudioBoton.setFocusable(false);
        startAudioBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startAudioBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startAudioBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAudioBotonActionPerformed(evt);
            }
        });
        jToolBar1.add(startAudioBoton);

        jToolBar1.add(listaReproduccionComboBox);

        jToolBar2.add(jToolBar1);

        StartGrabarAudioBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        StartGrabarAudioBoton.setFocusable(false);
        StartGrabarAudioBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        StartGrabarAudioBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        StartGrabarAudioBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartGrabarAudioBotonActionPerformed(evt);
            }
        });
        jToolBar2.add(StartGrabarAudioBoton);

        StopGrabarAudioBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stopRecord24x24.png"))); // NOI18N
        StopGrabarAudioBoton.setFocusable(false);
        StopGrabarAudioBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        StopGrabarAudioBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        StopGrabarAudioBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopGrabarAudioBotonActionPerformed(evt);
            }
        });
        jToolBar2.add(StopGrabarAudioBoton);

        WebCamBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        WebCamBoton.setFocusable(false);
        WebCamBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        WebCamBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        WebCamBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WebCamBotonActionPerformed(evt);
            }
        });
        jToolBar2.add(WebCamBoton);

        DuplicarImagenBoton.setText("Duplicar");
        DuplicarImagenBoton.setFocusable(false);
        DuplicarImagenBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DuplicarImagenBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        DuplicarImagenBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicarImagenBotonActionPerformed(evt);
            }
        });
        jToolBar2.add(DuplicarImagenBoton);

        jPanel2.add(jToolBar2, java.awt.BorderLayout.PAGE_START);

        BarraEstado.setText("Barra de estado");
        BarraEstado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(BarraEstado, java.awt.BorderLayout.PAGE_END);

        jPanel3.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        escritorio.setPreferredSize(new java.awt.Dimension(1080, 720));
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");

        ArchivoNuevo.setText("Nuevo");
        ArchivoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchivoNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(ArchivoNuevo);

        ArchivoAbrir.setText("Abrir");
        ArchivoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchivoAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(ArchivoAbrir);

        ArchivoGuardar.setText("Guardar");
        ArchivoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchivoGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(ArchivoGuardar);

        jMenuBar1.add(jMenu1);

        Edicion.setText("Edicion");

        EdicionBarraEstado.setSelected(true);
        EdicionBarraEstado.setText("Barra de estado");
        EdicionBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdicionBarraEstadoActionPerformed(evt);
            }
        });
        Edicion.add(EdicionBarraEstado);

        jMenuBar1.add(Edicion);

        ImagenMenu.setText("Imagen");

        RescaleOpImagenMenu.setText("RescaleOp");
        RescaleOpImagenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescaleOpImagenMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(RescaleOpImagenMenu);

        LookupOpImagenMenu.setText("LookupOp");
        LookupOpImagenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookupOpImagenMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(LookupOpImagenMenu);

        jMenuBar1.add(ImagenMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Get para los botones de las herramientas
    public JToggleButton getPuntoBoton()
    {
        return(this.PuntoBoton);
    }
    
    public JToggleButton getLineaBoton()
    {
        return(this.LineaBoton);
    }
    
    public JToggleButton getEllipseBoton()
    {
        return(this.CirculoBoton);
    }
    
    public JToggleButton getRectanguloBoton()
    {
        return(this.RectanguloBoton);
    }
    
    public JToggleButton getCurvaBoton()
    {
        return(this.curvaBoton);
    }
    
    public JToggleButton getTrazoLibreBoton()
    {
        return(this.TrazoLibreBoton);
    }
    
    public JToggleButton getPersonalizadaBoton()
    {
        return(this.PersonalizadaBoton);
    }
    
    
    // Metodos Get de los Modicadores de las Herramientas    
    ////////////////////////////////////////////////
       
    public JToggleButton getRellenoBoton()
    {
        return(this.RellenoBoton);
    }
    
    public JToggleButton getAlisadoBoton()
    {
        return(this.alisadoBoton);
    }
    
    public JToggleButton getSeleccionarBoton()
    {
        return(this.seleccionarFiguraBoton);
    }
    
    public JComboBox getGrosorCombobox()
    {
        return (this.grosorComboBox);
    }
    
    public JToggleButton getPunteadoBoton()
    {
        return(this.trazoPunteadoBoton);
    }
    
    public JCheckBox getDegradadoCheckbox()
    {
        return(this.degradadoCheckBox);
    }
    
    public JCheckBox getVerticalCheckbox()
    {
        return (this.verticalCheckBox);
    }
    
    public JCheckBox getHorizontallCheckbox()
    {
        return (this.horizontalCheckbox);
    }
    
    public JComboBox getPaletaTrazo()
    {
        return(this.PaletaColoresTrazo);
    }
    
    public JComboBox getPaletaRelleno()
    {
        return(this.PaletaColoresRelleno);
    }
    
    public JComboBox getPaletaFrente()
    {
        return(this.PaletaColoresFrente);
    }
    
    public JComboBox getPaletaFondo()
    {
        return(this.PaletaColoresFondo);
    }
    
    public JSlider getGradoTransparenciaSlider()
    {
        return(this.transparenciaSlider);
    }
    ////////////////////////////////////////////////
    
    public void setGrosorComboBox(int n)
    {
        this.grosorComboBox.setSelectedIndex(n-1);
    }
    
    public JDesktopPane getEscritorio()
    {
        return(this.escritorio);
    }
    
    ///////////////////////////////////////////////
    
    public LookupTable seno(double w)
    {
        double K = 255.0;
        byte[] lt = new byte[256];

        for (int l = 0; l <= 255; ++l)
        {
            lt[l] = (byte) (K * Math.abs(Math.sin(Math.toRadians((double) l * w))));
        }
        
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }
    
    
    private void rotate(int angle)
    {       
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            if(imgOriginal!=null)
            {
                double r = Math.toRadians(this.rotacionSlider.getValue());
                Point p = new Point(imgOriginal.getWidth()/2, imgOriginal.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imgOriginal, null);
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgdest);
                ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
            }
        }
    }
    
    private void scale(double scaleFactor)
    {
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null)
            {
                AffineTransform at = AffineTransform.getScaleInstance(scaleFactor, scaleFactor);
                    AffineTransformOp atop = new AffineTransformOp(at, 2);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
            }
        }
    }
    
    private Kernel asignacionKernel (int m, int n)
    {
        float dimension = (m*n);
        float valor = (1/dimension);
        float [] filtroMedia = new float[m*n];
        
        for(int i=0; i<dimension; i++)
        {
            filtroMedia[i] = valor;
        }
        return(new Kernel(m, n, filtroMedia));
    }
    
    private String getExtension(File f)
    {
        String nombre = f.getName();
        String extension = nombre.substring(nombre.indexOf(".")+1);
        
        return(extension);
    }
    
    
    ///////////////////////////////////////////////
    
    private void ArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchivoNuevoActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = new VentanaInternaImagen(this);
        this.escritorio.add(vi);
        vi.setVisible(true);
        
        BufferedImage img;
        img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
        
        //Poner color blanco
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, img.getWidth(), img.getHeight()));
        vi.getLienzo().setImage(img);
    }//GEN-LAST:event_ArchivoNuevoActionPerformed

    private void ArchivoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchivoAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
                
        
        if( resp == JFileChooser.APPROVE_OPTION)
        {
            try
            {
                //File f = dlg.getSelectedFile();
                File f = new File(dlg.getSelectedFile().getAbsolutePath()){
                    @Override
                    public String toString(){
                    return this.getName();
                    }
                    };
                
                if(this.formatosReproduccion.contains(this.getExtension(f)))
                {    
                    this.listaReproduccionComboBox.addItem(f);
                    VentanaInternaVLCPlayer viplayer = VentanaInternaVLCPlayer.getInstance(f,this);
                    if(viplayer!=null)
                    {
                        this.escritorio.add(viplayer);
                        viplayer.setVisible(true);  
                    }
                    else
                    {
                        System.out.println("Ventana Interna VLC es null");
                    }
                }
                else if (this.formatosImagen.contains(this.getExtension(f)))
                {
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen viIMG = new VentanaInternaImagen (this);
                    viIMG.getLienzo().setImage(img);
                    this.escritorio.add(viIMG);
                    viIMG.setTitle(f.getName());
                    viIMG.setVisible(true);
                }
                
            }catch(Exception ex)
            {
                System.err.println("Error al procesar el archivo");
            }
        }
    }//GEN-LAST:event_ArchivoAbrirActionPerformed

    private void ArchivoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchivoGuardarActionPerformed
         // TODO add your handling code here:
        viSeleccionada =(VentanaInterna) escritorio.getSelectedFrame();
        if (viSeleccionada != null)
        {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION)
            {
                try
                {
                    BufferedImage img = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage(true);
                    if (img != null)
                    {
                        File f = dlg.getSelectedFile();
                        
                        String extension = getExtension(f);
                        
                        ImageIO.write(img, extension, f);
                        viSeleccionada.setTitle(f.getName());
                    }
                }catch (Exception ex)
                {
                        System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_ArchivoGuardarActionPerformed

    private void PuntoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PuntoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.PUNTO);
        }
        BarraEstado.setText("Punto");
    }//GEN-LAST:event_PuntoBotonActionPerformed

    private void LineaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineaBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.LINEA);
        }
        
        BarraEstado.setText("Linea");
    }//GEN-LAST:event_LineaBotonActionPerformed

    private void CirculoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CirculoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.CIRCULO);
        }
        
        BarraEstado.setText("Circulo");
    }//GEN-LAST:event_CirculoBotonActionPerformed

    private void RectanguloBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectanguloBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.RECTANGULO);
        }
        
        BarraEstado.setText("Rectangulo");
    }//GEN-LAST:event_RectanguloBotonActionPerformed

    private void EdicionBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdicionBarraEstadoActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            if(BarraEstado.isVisible())
            {
                BarraEstado.setVisible(false);
            }
            else
            {
                BarraEstado.setVisible(true);
            }
        }
    }//GEN-LAST:event_EdicionBarraEstadoActionPerformed

    private void grosorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grosorComboBoxActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setGrosorTrazo(this.grosorComboBox.getSelectedIndex() + 1);
            }
            else
            {
                Stroke stroke = new BasicStroke (this.grosorComboBox.getSelectedIndex() + 1);
                seleccionada.setGrosorTrazo(this.grosorComboBox.getSelectedIndex() + 1);
                seleccionada.setStroke(stroke);
                repaint();
            }
        }
    }//GEN-LAST:event_grosorComboBoxActionPerformed

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada!=null && imgOriginal != null)
        {
            RescaleOp rop;
            if(imgOriginal.getColorModel().hasAlpha())
            {
                float[] scales = new float[]{1.0f, 1.0f, 1.0f, 1.0f};
                float brillo = this.brilloSlider.getValue();
                float[] offsets = new float[]{brillo, brillo, brillo, 0.0f};
                rop = new RescaleOp(scales, offsets, null);
            }
            else
            {
                rop = new RescaleOp(1.0F, this.brilloSlider.getValue(), null);
            }
            rop.filter(imgOriginal, ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage());
            this.escritorio.repaint();
        }
    }//GEN-LAST:event_brilloSliderStateChanged

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if(viSeleccionada!=null)
        {
            imgOriginal = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgOriginal != null)
            {            
                ColorModel cm = imgOriginal.getColorModel();
                WritableRaster raster = imgOriginal.copyData(null);
                boolean alfaPre = imgOriginal.isAlphaPremultiplied();
                imgOriginal = new BufferedImage(cm,raster,alfaPre,null);
            }
        }
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        // TODO add your handling code here:
        imgOriginal = null;
    }//GEN-LAST:event_brilloSliderFocusLost

    private void PaletaColoresTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaletaColoresTrazoActionPerformed
        // TODO add your handling code here:
        int R, G, B;

        StringTokenizer st = new StringTokenizer(this.PaletaColoresTrazo.getSelectedItem().toString(), "java.awt.Color[],=rgb");

        R = Integer.parseInt(st.nextToken());
        G = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        Color c = new Color(R, G, B);

        this.PaletaColoresTrazo.setBackground(c);
        
        viSeleccionada = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();
            
            if(seleccionada == null)
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setColorTrazo(this.PaletaColoresTrazo.getBackground());
            }
            else
            {
                seleccionada.setColorTrazo(this.PaletaColoresTrazo.getBackground());
                repaint();
            }
        }
    }//GEN-LAST:event_PaletaColoresTrazoActionPerformed

    private void FiltroComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltroComboBoxActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null)
            {
                Kernel k = null;
                switch((String)this.FiltroComboBox.getSelectedItem())
                {
                    case "Media":
                        //k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        k = this.asignacionKernel(7, 7);
                        break;
                    case "Binomial":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                    case "Enfoque":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);    
                        break;
                    case "Relieve":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);    
                        break;
                    case "Fronteras":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);    
                        break;
                }
                if (k!=null)
                {
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
                }
            }
        }
    }//GEN-LAST:event_FiltroComboBoxActionPerformed

    private void NormalContrasteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NormalContrasteBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    LookupTable lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                    LookupOp lop = new LookupOp(lt, null);
                    /*
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    */
                    
                    // Borrar esta y poner lo de arriba si falla
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_NormalContrasteBotonActionPerformed

    private void IluminadoContrasteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IluminadoContrasteBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    LookupTable lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                    LookupOp lop = new LookupOp(lt, null);
                    /*
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    */
                    
                    // Borrar esta y poner lo de arriba si falla
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_IluminadoContrasteBotonActionPerformed

    private void OscurecidoContrasteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OscurecidoContrasteBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    LookupTable lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                    LookupOp lop = new LookupOp(lt, null);
                    /*
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    */
                    
                    // Borrar esta y poner lo de arriba si falla
                    BufferedImage imgdest = lop.filter(imgSource, imgSource);
                    
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_OscurecidoContrasteBotonActionPerformed

    private void SenoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SenoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    LookupTable lt = this.seno(180.0/255.0);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    viSeleccionada.repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SenoBotonActionPerformed

    private void rotacionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionSliderStateChanged
        // TODO add your handling code here:
        this.rotate(this.rotacionSlider.getValue());
    }//GEN-LAST:event_rotacionSliderStateChanged

    private void AumentarEscaladoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AumentarEscaladoBotonActionPerformed
        // TODO add your handling code here:
        this.scale(1.25);
    }//GEN-LAST:event_AumentarEscaladoBotonActionPerformed

    private void DisminuirEscaladoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisminuirEscaladoBotonActionPerformed
        // TODO add your handling code here:
        this.scale(0.75);
    }//GEN-LAST:event_DisminuirEscaladoBotonActionPerformed

    private void bandasBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandasBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            // Abrir tantas ventanas internas como bandas tenga la imagen
            for(int iBanda=0; iBanda<imgSource.getRaster().getNumBands(); iBanda++)
            {
                VentanaInternaImagen vBanda = new VentanaInternaImagen(this);
                this.escritorio.add(vBanda);
                vBanda.setVisible(true);
                
                //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                ComponentColorModel cm = new ComponentColorModel(cs, false, false,
                Transparency.OPAQUE,
                DataBuffer.TYPE_BYTE);
                
                //Creamos el nuevo raster a partir del raster de la imagen original
                int bandList[] = {iBanda};
                WritableRaster bandRaster = (WritableRaster)imgSource.getRaster().createWritableChild(0,0,
                imgSource.getWidth(), imgSource.getHeight(), 0, 0, bandList);
                
                //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
                BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
                
                ((VentanaInternaImagen) vBanda).getLienzo().setImage(imgBanda);
            }
        }
    }//GEN-LAST:event_bandasBotonActionPerformed

    private void espacioColorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espacioColorComboBoxActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if(viSeleccionada!=null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource != null)
            {
                BufferedImage imgOut = null;
                switch(this.espacioColorComboBox.getSelectedItem().toString())
                {
                    // Comprobamos que no esté ya en RGB
                    case "RGB":
                    {
                        if (imgSource.getColorModel().getColorSpace().isCS_sRGB())
                        {
                            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgOut = cop.filter(imgSource, null);
                            
                            VentanaInternaImagen vBanda = new VentanaInternaImagen(this);
                            this.escritorio.add(vBanda);
                            vBanda.setVisible(true);

                            vBanda.getLienzo().setImage(imgOut);
                        }
                    }
                        break;
                    case "YCC":
                    {
                        // Comprobamos que no esté ya en YCC
                        if (imgSource.getType() != 0)
                        {
                            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgOut = cop.filter(imgSource, null);
                            
                            VentanaInternaImagen vBanda = new VentanaInternaImagen(this);
                            this.escritorio.add(vBanda);
                            vBanda.setVisible(true);

                            vBanda.getLienzo().setImage(imgOut);
                        }
                    }
                        break;
                    case "GREY":
                    {
                        // Comprobamos que no esté ya en GREY
                        if (imgSource.getType() != 10)
                        {
                            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            imgOut = cop.filter(imgSource, null);
                            
                            VentanaInternaImagen vBanda = new VentanaInternaImagen(this);
                            this.escritorio.add(vBanda);
                            vBanda.setVisible(true);

                            vBanda.getLienzo().setImage(imgOut);
                        }
                    }
                        break;
                }
                this.repaint();
            }
            
            
        }
    }//GEN-LAST:event_espacioColorComboBoxActionPerformed

    private void rotacionSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusGained
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if(viSeleccionada!=null)
        {
            imgOriginal = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgOriginal != null)
            {            
                ColorModel cm = imgOriginal.getColorModel();
                WritableRaster raster = imgOriginal.copyData(null);
                boolean alfaPre = imgOriginal.isAlphaPremultiplied();
                imgOriginal = new BufferedImage(cm,raster,alfaPre,null);
            }
        }
    }//GEN-LAST:event_rotacionSliderFocusGained

    private void rotacionSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusLost
        // TODO add your handling code here:
        imgOriginal=null;
    }//GEN-LAST:event_rotacionSliderFocusLost

    private void sepiaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            BufferedImage imgOut = null;
            if (imgSource != null)
            {
                    SepiaOp so = new SepiaOp();
                    imgOut = so.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgOut);
                    this.repaint();
            }
        }
    }//GEN-LAST:event_sepiaBotonActionPerformed

    private void startAudioBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAudioBotonActionPerformed
        // TODO add your handling code here:
        File f = (File)this.listaReproduccionComboBox.getSelectedItem();
        if(f!=null)
        {
            VentanaInternaVLCPlayer viplayer = VentanaInternaVLCPlayer.getInstance(f,this);
            if(viplayer!=null)
            {
                this.escritorio.add(viplayer);
                viplayer.setVisible(true);  
            }
            else
            {
                System.out.println("Ventana Interna VLC es null");
            }
            /*
            player = new SMClipPlayer(f);
            ((SMClipPlayer) player).addLineListener (new ManejadorAudio());
            if (player != null) {
            player.play();
            }
            */
        }
    }//GEN-LAST:event_startAudioBotonActionPerformed

    private void StartGrabarAudioBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartGrabarAudioBotonActionPerformed
        // TODO add your handling code here:
        sonidoTemporal = new File("./temporal.wav");
        if(sonidoTemporal != null)
        {
            recorder = new SMSoundRecorder(sonidoTemporal);
            recorder.record();
            this.StartGrabarAudioBoton.setEnabled(false);
        }
    }//GEN-LAST:event_StartGrabarAudioBotonActionPerformed

    private void StopGrabarAudioBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopGrabarAudioBotonActionPerformed
        // TODO add your handling code here:
        if(recorder!=null)
        {
            recorder.stop();
            recorder=null;
            this.StartGrabarAudioBoton.setEnabled(true);
        }
        
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION)
        {
            try
            {
                File f = dlg.getSelectedFile();
                sonidoTemporal.renameTo(f);
            }
            catch(Exception ex)
            {
                System.err.println("Error al guardar el sonido");
            }
        }
    }//GEN-LAST:event_StopGrabarAudioBotonActionPerformed

    private void WebCamBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WebCamBotonActionPerformed
        // TODO add your handling code here:
        VentanaInternaCamara vic = VentanaInternaCamara.getInstance(this);
        
        if(vic != null)
        {
            this.escritorio.add(vic);
            vic.setVisible(true);
        }
        else
        {
            System.out.println("No se pudo abrir una webcam");
        }
    }//GEN-LAST:event_WebCamBotonActionPerformed

    private void DuplicarImagenBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicarImagenBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            
            if (imgSource != null)
            {
                ColorModel cm = imgSource.getColorModel();
                boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
                WritableRaster raster = imgSource.copyData(null);
                
                VentanaInternaImagen vim = new VentanaInternaImagen(this);                
                vim.getLienzo().setImage(new BufferedImage(cm, raster, isAlphaPremultiplied, null));
                this.escritorio.add(vim);
                vim.setVisible(true);
            }
        }
    }//GEN-LAST:event_DuplicarImagenBotonActionPerformed

    private void PaletaColoresFrenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaletaColoresFrenteActionPerformed
        // TODO add your handling code here:
        int R, G, B;

        StringTokenizer st = new StringTokenizer(this.PaletaColoresFrente.getSelectedItem().toString(), "java.awt.Color[],=rgb");

        R = Integer.parseInt(st.nextToken());
        G = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        Color c = new Color(R, G, B);

        this.PaletaColoresFrente.setBackground(c);
        
        viSeleccionada = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();
            
            if(seleccionada == null)
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setColorFrente(this.PaletaColoresFrente.getBackground());
            }
            else
            {
                seleccionada.setColorFrente(this.PaletaColoresFrente.getBackground());
                repaint();
            }
        }
    }//GEN-LAST:event_PaletaColoresFrenteActionPerformed

    private void PaletaColoresFondoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaletaColoresFondoActionPerformed
        // TODO add your handling code here:
        int R, G, B;

        StringTokenizer st = new StringTokenizer(this.PaletaColoresFondo.getSelectedItem().toString(), "java.awt.Color[],=rgb");

        R = Integer.parseInt(st.nextToken());
        G = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        Color c = new Color(R, G, B);

        this.PaletaColoresFondo.setBackground(c);
        
        viSeleccionada = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();
            
            if(seleccionada == null)
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setColorFondo(this.PaletaColoresFondo.getBackground());
            }
            else
            {
                seleccionada.setColorFondo(this.PaletaColoresFondo.getBackground());
                repaint();
            }
        }
    }//GEN-LAST:event_PaletaColoresFondoActionPerformed

    private void horizontalCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalCheckboxActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                if(this.horizontalCheckbox.isSelected())
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setHorizontal(true);
                }
                else
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setHorizontal(false);
                }
            }
            else
            {
                if(this.horizontalCheckbox.isSelected())
                {
                    seleccionada.setHorizontal(true);
                }
                else
                {
                    seleccionada.setHorizontal(false);
                }
                repaint();
            }
        }
    }//GEN-LAST:event_horizontalCheckboxActionPerformed

    private void PaletaColoresRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaletaColoresRellenoActionPerformed
        // TODO add your handling code here:
        int R, G, B;

        StringTokenizer st = new StringTokenizer(this.PaletaColoresRelleno.getSelectedItem().toString(), "java.awt.Color[],=rgb");

        R = Integer.parseInt(st.nextToken());
        G = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        Color c = new Color(R, G, B);

        this.PaletaColoresRelleno.setBackground(c);
        
        viSeleccionada = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();
            
            if(seleccionada == null)
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setColorRelleno(this.PaletaColoresRelleno.getBackground());
            }
            else
            {
                seleccionada.setColorRelleno(this.PaletaColoresRelleno.getBackground());
                repaint();
            }
        }
    }//GEN-LAST:event_PaletaColoresRellenoActionPerformed

    private void RellenoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RellenoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            viSeleccionada = (VentanaInterna) this.escritorio.getSelectedFrame();
            if (viSeleccionada != null)
            {
                MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

                if(seleccionada == null)
                {
                    if(this.RellenoBoton.isSelected())
                    {
                        ((VentanaInternaImagen) viSeleccionada).getLienzo().setRelleno(true);
                    }
                    else
                    {
                        ((VentanaInternaImagen) viSeleccionada).getLienzo().setRelleno(false);
                    }
                }
                else
                {
                    if(this.RellenoBoton.isSelected())
                    {
                        seleccionada.setRelleno(true);
                    }
                    else
                    {
                        seleccionada.setRelleno(false);
                    }
                    repaint();
                }
            }
            
        }
    }//GEN-LAST:event_RellenoBotonActionPerformed

    private void alisadoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisadoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                if(this.alisadoBoton.isSelected())
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setAlisado(true);
                }
                else
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setAlisado(false);
                }
            }
            else
            {
                if(this.alisadoBoton.isSelected())
                {
                    seleccionada.setAlisado(true);
                }
                else
                {
                    seleccionada.setAlisado(false);
                }
                repaint();
            }
        }
    }//GEN-LAST:event_alisadoBotonActionPerformed

    private void seleccionarFiguraBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarFiguraBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            if(this.seleccionarFiguraBoton.isSelected())
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setSeleccionar(true);
            }
            else
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setSeleccionar(false);
            }
        }
    }//GEN-LAST:event_seleccionarFiguraBotonActionPerformed

    private void verticalCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalCheckBoxActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                if(this.verticalCheckBox.isSelected())
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setVertical(true);
                }
                else
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setVertical(false);
                }
            }
            else
            {
                if(this.verticalCheckBox.isSelected())
                {
                    seleccionada.setVertical(true);
                }
                else
                {
                    seleccionada.setVertical(false);
                }
                repaint();
            }
        }
    }//GEN-LAST:event_verticalCheckBoxActionPerformed

    private void trazoPunteadoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trazoPunteadoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                if(this.trazoPunteadoBoton.isSelected())
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setTrazoPunteado(true);
                }
                else
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setTrazoPunteado(false);
                }
            }
            else
            {
                if(this.trazoPunteadoBoton.isSelected())
                {
                    seleccionada.setTrazoPunteado(true);
                }
                else
                {
                    seleccionada.setTrazoPunteado(false);
                }
                repaint();
            }
        }
    }//GEN-LAST:event_trazoPunteadoBotonActionPerformed

    private void degradadoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradadoCheckBoxActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                if(this.degradadoCheckBox.isSelected())
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setDegradado(true);
                }
                else
                {
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setDegradado(false);
                }
            }
            else
            {
                if(this.degradadoCheckBox.isSelected())
                {
                    seleccionada.setDegradado(true);
                }
                else
                {
                    seleccionada.setDegradado(false);
                }
                repaint();
            }
        }
    }//GEN-LAST:event_degradadoCheckBoxActionPerformed

    private void frenteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frenteBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().alFrente();
        }
    }//GEN-LAST:event_frenteBotonActionPerformed

    private void fondoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fondoBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().alFondo();
        }
    }//GEN-LAST:event_fondoBotonActionPerformed

    private void TrazoLibreBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrazoLibreBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.GENERALPATH);
        }
        
        BarraEstado.setText("Trazo Libre");
    }//GEN-LAST:event_TrazoLibreBotonActionPerformed

    private void PersonalizadaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PersonalizadaBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.MIPERSONALIZADA);
        }
        
        BarraEstado.setText("Personalizada");
    }//GEN-LAST:event_PersonalizadaBotonActionPerformed

    private void curvaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            ((VentanaInternaImagen) viSeleccionada).getLienzo().setModo(EnumObjeto.QUADCURVESEGMENT);
        }
        
        BarraEstado.setText("Curva");
    }//GEN-LAST:event_curvaBotonActionPerformed

    private void CtCBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CtCBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            BufferedImage imgOut = null;
            if (imgSource != null)
            {
                    CompToComp cmp = new CompToComp();
                    imgOut = cmp.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgOut);
                    this.repaint();
            }
        }
    }//GEN-LAST:event_CtCBotonActionPerformed

    private void PtPBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PtPBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna)(escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            BufferedImage imgOut = null;
            if (imgSource != null)
            {
                    PixelToPixel ptp = new PixelToPixel();
                    imgOut = ptp.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgOut);
                    this.repaint();
            }
        }
    }//GEN-LAST:event_PtPBotonActionPerformed

    private void LOBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOBotonActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    MiLookOp milo = new MiLookOp();
                    LookupOp lop = new LookupOp(milo.getTable(), null);
                    lop.filter(imgSource, imgSource);
                    viSeleccionada.repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_LOBotonActionPerformed

    private void LookupOpImagenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookupOpImagenMenuActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null)
        {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    LookupTable lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_LookupOpImagenMenuActionPerformed

    private void RescaleOpImagenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescaleOpImagenMenuActionPerformed
        // TODO add your handling code here:
        viSeleccionada = (VentanaInterna) (escritorio.getSelectedFrame());
        if (viSeleccionada != null) {
            BufferedImage imgSource = ((VentanaInternaImagen) viSeleccionada).getLienzo().getImage();
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    BufferedImage imgdest = rop.filter(imgSource, null);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) viSeleccionada).getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RescaleOpImagenMenuActionPerformed

    private void nuevoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBotonActionPerformed
        // TODO add your handling code here:
        this.ArchivoNuevoActionPerformed(evt);
    }//GEN-LAST:event_nuevoBotonActionPerformed

    private void abrirBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirBotonActionPerformed
        // TODO add your handling code here:
        this.ArchivoAbrirActionPerformed(evt);
    }//GEN-LAST:event_abrirBotonActionPerformed

    private void guardarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBotonActionPerformed
        // TODO add your handling code here:
        this.ArchivoGuardarActionPerformed(evt);
    }//GEN-LAST:event_guardarBotonActionPerformed

    private void transparenciaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparenciaSliderStateChanged
        // TODO add your handling code here:
        viSeleccionada = ((VentanaInterna)this.escritorio.getSelectedFrame());
        if(viSeleccionada != null)
        {
            MiForma seleccionada = ((VentanaInternaImagen) viSeleccionada).getLienzo().getSeleccionada();

            if(seleccionada == null)
            {
                ((VentanaInternaImagen) viSeleccionada).getLienzo().setGradoTransparencia((float)(this.transparenciaSlider.getValue()/100.0));
            }
            else
            {
                seleccionada.setGradoTransparencia((float)(this.transparenciaSlider.getValue()/100.0));
                repaint();
            }
        }
    }//GEN-LAST:event_transparenciaSliderStateChanged

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ArchivoAbrir;
    private javax.swing.JMenuItem ArchivoGuardar;
    private javax.swing.JMenuItem ArchivoNuevo;
    private javax.swing.JButton AumentarEscaladoBoton;
    private javax.swing.JLabel BarraEstado;
    private javax.swing.JToggleButton CirculoBoton;
    private javax.swing.ButtonGroup Colores;
    private javax.swing.JButton CtCBoton;
    private javax.swing.JButton DisminuirEscaladoBoton;
    private javax.swing.JButton DuplicarImagenBoton;
    private javax.swing.JMenu Edicion;
    private javax.swing.JCheckBoxMenuItem EdicionBarraEstado;
    private javax.swing.JComboBox<String> FiltroComboBox;
    private javax.swing.ButtonGroup Herramientas;
    private javax.swing.JButton IluminadoContrasteBoton;
    private javax.swing.JMenu ImagenMenu;
    private javax.swing.JButton LOBoton;
    private javax.swing.JToggleButton LineaBoton;
    private javax.swing.JMenuItem LookupOpImagenMenu;
    private javax.swing.JButton NormalContrasteBoton;
    private javax.swing.JButton OscurecidoContrasteBoton;
    private javax.swing.JComboBox<String> PaletaColoresFondo;
    private javax.swing.JComboBox<String> PaletaColoresFrente;
    private javax.swing.JComboBox<String> PaletaColoresRelleno;
    private javax.swing.JComboBox<String> PaletaColoresTrazo;
    private javax.swing.JToggleButton PersonalizadaBoton;
    private javax.swing.JButton PtPBoton;
    private javax.swing.JToggleButton PuntoBoton;
    private javax.swing.JToggleButton RectanguloBoton;
    private javax.swing.JToggleButton RellenoBoton;
    private javax.swing.JMenuItem RescaleOpImagenMenu;
    private javax.swing.JButton SenoBoton;
    private javax.swing.JButton StartGrabarAudioBoton;
    private javax.swing.JButton StopGrabarAudioBoton;
    private javax.swing.JToggleButton TrazoLibreBoton;
    private javax.swing.JButton WebCamBoton;
    private javax.swing.JButton abrirBoton;
    private javax.swing.JToggleButton alisadoBoton;
    private javax.swing.JButton bandasBoton;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JToggleButton curvaBoton;
    private javax.swing.JCheckBox degradadoCheckBox;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox<String> espacioColorComboBox;
    private javax.swing.JButton fondoBoton;
    private javax.swing.JButton frenteBoton;
    private javax.swing.JComboBox<String> grosorComboBox;
    private javax.swing.JButton guardarBoton;
    private javax.swing.JToolBar herramientasBar;
    private javax.swing.JCheckBox horizontalCheckbox;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JComboBox<File> listaReproduccionComboBox;
    private javax.swing.JButton nuevoBoton;
    private javax.swing.JSlider rotacionSlider;
    private javax.swing.JToggleButton seleccionarFiguraBoton;
    private javax.swing.JButton sepiaBoton;
    private javax.swing.JButton startAudioBoton;
    private javax.swing.ButtonGroup tipoDegradado;
    private javax.swing.JSlider transparenciaSlider;
    private javax.swing.JToggleButton trazoPunteadoBoton;
    private javax.swing.JCheckBox verticalCheckBox;
    // End of variables declaration//GEN-END:variables
}
